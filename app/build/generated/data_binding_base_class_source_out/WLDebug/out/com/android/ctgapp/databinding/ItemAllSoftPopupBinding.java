// Generated by view binder compiler. Do not edit!
package com.android.ctgapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.android.ctgapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemAllSoftPopupBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final RelativeLayout mBottomRL;

  @NonNull
  public final RecyclerView mBrandRV;

  @NonNull
  public final Button mConfirmBTN;

  @NonNull
  public final Button mResetBTN;

  private ItemAllSoftPopupBinding(@NonNull LinearLayout rootView, @NonNull RelativeLayout mBottomRL,
      @NonNull RecyclerView mBrandRV, @NonNull Button mConfirmBTN, @NonNull Button mResetBTN) {
    this.rootView = rootView;
    this.mBottomRL = mBottomRL;
    this.mBrandRV = mBrandRV;
    this.mConfirmBTN = mConfirmBTN;
    this.mResetBTN = mResetBTN;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemAllSoftPopupBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemAllSoftPopupBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_all_soft_popup, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemAllSoftPopupBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.mBottomRL;
      RelativeLayout mBottomRL = rootView.findViewById(id);
      if (mBottomRL == null) {
        break missingId;
      }

      id = R.id.mBrandRV;
      RecyclerView mBrandRV = rootView.findViewById(id);
      if (mBrandRV == null) {
        break missingId;
      }

      id = R.id.mConfirmBTN;
      Button mConfirmBTN = rootView.findViewById(id);
      if (mConfirmBTN == null) {
        break missingId;
      }

      id = R.id.mResetBTN;
      Button mResetBTN = rootView.findViewById(id);
      if (mResetBTN == null) {
        break missingId;
      }

      return new ItemAllSoftPopupBinding((LinearLayout) rootView, mBottomRL, mBrandRV, mConfirmBTN,
          mResetBTN);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
