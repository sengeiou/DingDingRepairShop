// Generated by view binder compiler. Do not edit!
package com.android.ctgapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.android.ctgapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemAddressListBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView mAddressTV;

  @NonNull
  public final CheckBox mCheckBox;

  @NonNull
  public final TextView mCheckBoxTV;

  @NonNull
  public final TextView mCompanyTV;

  @NonNull
  public final TextView mDeleteTV;

  @NonNull
  public final TextView mEditTextTV;

  @NonNull
  public final TextView mNameTV;

  @NonNull
  public final LinearLayout mParentLL;

  private ItemAddressListBinding(@NonNull LinearLayout rootView, @NonNull TextView mAddressTV,
      @NonNull CheckBox mCheckBox, @NonNull TextView mCheckBoxTV, @NonNull TextView mCompanyTV,
      @NonNull TextView mDeleteTV, @NonNull TextView mEditTextTV, @NonNull TextView mNameTV,
      @NonNull LinearLayout mParentLL) {
    this.rootView = rootView;
    this.mAddressTV = mAddressTV;
    this.mCheckBox = mCheckBox;
    this.mCheckBoxTV = mCheckBoxTV;
    this.mCompanyTV = mCompanyTV;
    this.mDeleteTV = mDeleteTV;
    this.mEditTextTV = mEditTextTV;
    this.mNameTV = mNameTV;
    this.mParentLL = mParentLL;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemAddressListBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemAddressListBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_address_list, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemAddressListBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.mAddressTV;
      TextView mAddressTV = rootView.findViewById(id);
      if (mAddressTV == null) {
        break missingId;
      }

      id = R.id.mCheckBox;
      CheckBox mCheckBox = rootView.findViewById(id);
      if (mCheckBox == null) {
        break missingId;
      }

      id = R.id.mCheckBoxTV;
      TextView mCheckBoxTV = rootView.findViewById(id);
      if (mCheckBoxTV == null) {
        break missingId;
      }

      id = R.id.mCompanyTV;
      TextView mCompanyTV = rootView.findViewById(id);
      if (mCompanyTV == null) {
        break missingId;
      }

      id = R.id.mDeleteTV;
      TextView mDeleteTV = rootView.findViewById(id);
      if (mDeleteTV == null) {
        break missingId;
      }

      id = R.id.mEditTextTV;
      TextView mEditTextTV = rootView.findViewById(id);
      if (mEditTextTV == null) {
        break missingId;
      }

      id = R.id.mNameTV;
      TextView mNameTV = rootView.findViewById(id);
      if (mNameTV == null) {
        break missingId;
      }

      LinearLayout mParentLL = (LinearLayout) rootView;

      return new ItemAddressListBinding((LinearLayout) rootView, mAddressTV, mCheckBox, mCheckBoxTV,
          mCompanyTV, mDeleteTV, mEditTextTV, mNameTV, mParentLL);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
