// Generated by view binder compiler. Do not edit!
package com.android.ctgapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.android.ctgapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayaoutItemContactsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView mAddTV;

  @NonNull
  public final ImageView mContactImageIV;

  @NonNull
  public final TextView mContactName;

  @NonNull
  public final TextView mIndexTV;

  @NonNull
  public final TextView mPhoneNumTV;

  private LayaoutItemContactsBinding(@NonNull LinearLayout rootView, @NonNull TextView mAddTV,
      @NonNull ImageView mContactImageIV, @NonNull TextView mContactName,
      @NonNull TextView mIndexTV, @NonNull TextView mPhoneNumTV) {
    this.rootView = rootView;
    this.mAddTV = mAddTV;
    this.mContactImageIV = mContactImageIV;
    this.mContactName = mContactName;
    this.mIndexTV = mIndexTV;
    this.mPhoneNumTV = mPhoneNumTV;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayaoutItemContactsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayaoutItemContactsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layaout_item_contacts, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayaoutItemContactsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.mAddTV;
      TextView mAddTV = rootView.findViewById(id);
      if (mAddTV == null) {
        break missingId;
      }

      id = R.id.mContactImageIV;
      ImageView mContactImageIV = rootView.findViewById(id);
      if (mContactImageIV == null) {
        break missingId;
      }

      id = R.id.mContactName;
      TextView mContactName = rootView.findViewById(id);
      if (mContactName == null) {
        break missingId;
      }

      id = R.id.mIndexTV;
      TextView mIndexTV = rootView.findViewById(id);
      if (mIndexTV == null) {
        break missingId;
      }

      id = R.id.mPhoneNumTV;
      TextView mPhoneNumTV = rootView.findViewById(id);
      if (mPhoneNumTV == null) {
        break missingId;
      }

      return new LayaoutItemContactsBinding((LinearLayout) rootView, mAddTV, mContactImageIV,
          mContactName, mIndexTV, mPhoneNumTV);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
