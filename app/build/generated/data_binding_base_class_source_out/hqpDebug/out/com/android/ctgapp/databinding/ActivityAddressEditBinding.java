// Generated by view binder compiler. Do not edit!
package com.android.ctgapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.LinearLayoutCompat;
import androidx.viewbinding.ViewBinding;
import com.android.ctgapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityAddressEditBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final EditText mAddressDetailET;

  @NonNull
  public final TextView mAddressSelectTV;

  @NonNull
  public final TextView mCheckBoxTV;

  @NonNull
  public final EditText mNameTV;

  @NonNull
  public final EditText mPhoneET;

  @NonNull
  public final Button mSaveBTN;

  @NonNull
  public final CheckBox mSetDefaultCB;

  @NonNull
  public final LinearLayoutCompat mSetDefaultLL;

  private ActivityAddressEditBinding(@NonNull LinearLayout rootView,
      @NonNull EditText mAddressDetailET, @NonNull TextView mAddressSelectTV,
      @NonNull TextView mCheckBoxTV, @NonNull EditText mNameTV, @NonNull EditText mPhoneET,
      @NonNull Button mSaveBTN, @NonNull CheckBox mSetDefaultCB,
      @NonNull LinearLayoutCompat mSetDefaultLL) {
    this.rootView = rootView;
    this.mAddressDetailET = mAddressDetailET;
    this.mAddressSelectTV = mAddressSelectTV;
    this.mCheckBoxTV = mCheckBoxTV;
    this.mNameTV = mNameTV;
    this.mPhoneET = mPhoneET;
    this.mSaveBTN = mSaveBTN;
    this.mSetDefaultCB = mSetDefaultCB;
    this.mSetDefaultLL = mSetDefaultLL;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityAddressEditBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityAddressEditBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_address_edit, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityAddressEditBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.mAddressDetailET;
      EditText mAddressDetailET = rootView.findViewById(id);
      if (mAddressDetailET == null) {
        break missingId;
      }

      id = R.id.mAddressSelectTV;
      TextView mAddressSelectTV = rootView.findViewById(id);
      if (mAddressSelectTV == null) {
        break missingId;
      }

      id = R.id.mCheckBoxTV;
      TextView mCheckBoxTV = rootView.findViewById(id);
      if (mCheckBoxTV == null) {
        break missingId;
      }

      id = R.id.mNameTV;
      EditText mNameTV = rootView.findViewById(id);
      if (mNameTV == null) {
        break missingId;
      }

      id = R.id.mPhoneET;
      EditText mPhoneET = rootView.findViewById(id);
      if (mPhoneET == null) {
        break missingId;
      }

      id = R.id.mSaveBTN;
      Button mSaveBTN = rootView.findViewById(id);
      if (mSaveBTN == null) {
        break missingId;
      }

      id = R.id.mSetDefaultCB;
      CheckBox mSetDefaultCB = rootView.findViewById(id);
      if (mSetDefaultCB == null) {
        break missingId;
      }

      id = R.id.mSetDefaultLL;
      LinearLayoutCompat mSetDefaultLL = rootView.findViewById(id);
      if (mSetDefaultLL == null) {
        break missingId;
      }

      return new ActivityAddressEditBinding((LinearLayout) rootView, mAddressDetailET,
          mAddressSelectTV, mCheckBoxTV, mNameTV, mPhoneET, mSaveBTN, mSetDefaultCB, mSetDefaultLL);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
