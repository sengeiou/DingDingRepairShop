// Generated by view binder compiler. Do not edit!
package com.android.ctgapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.LinearLayoutCompat;
import androidx.viewbinding.ViewBinding;
import com.android.ctgapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemWhiteBarDetailChildListBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView mAccountPriceTV;

  @NonNull
  public final CheckBox mCheckBox;

  @NonNull
  public final TextView mOrderNumberTV;

  @NonNull
  public final TextView mOrderPriceTV;

  @NonNull
  public final TextView mOrderTimeTV;

  @NonNull
  public final LinearLayoutCompat mParentLL;

  private ItemWhiteBarDetailChildListBinding(@NonNull RelativeLayout rootView,
      @NonNull TextView mAccountPriceTV, @NonNull CheckBox mCheckBox,
      @NonNull TextView mOrderNumberTV, @NonNull TextView mOrderPriceTV,
      @NonNull TextView mOrderTimeTV, @NonNull LinearLayoutCompat mParentLL) {
    this.rootView = rootView;
    this.mAccountPriceTV = mAccountPriceTV;
    this.mCheckBox = mCheckBox;
    this.mOrderNumberTV = mOrderNumberTV;
    this.mOrderPriceTV = mOrderPriceTV;
    this.mOrderTimeTV = mOrderTimeTV;
    this.mParentLL = mParentLL;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemWhiteBarDetailChildListBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemWhiteBarDetailChildListBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_white_bar_detail_child_list, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemWhiteBarDetailChildListBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.mAccountPriceTV;
      TextView mAccountPriceTV = rootView.findViewById(id);
      if (mAccountPriceTV == null) {
        break missingId;
      }

      id = R.id.mCheckBox;
      CheckBox mCheckBox = rootView.findViewById(id);
      if (mCheckBox == null) {
        break missingId;
      }

      id = R.id.mOrderNumberTV;
      TextView mOrderNumberTV = rootView.findViewById(id);
      if (mOrderNumberTV == null) {
        break missingId;
      }

      id = R.id.mOrderPriceTV;
      TextView mOrderPriceTV = rootView.findViewById(id);
      if (mOrderPriceTV == null) {
        break missingId;
      }

      id = R.id.mOrderTimeTV;
      TextView mOrderTimeTV = rootView.findViewById(id);
      if (mOrderTimeTV == null) {
        break missingId;
      }

      id = R.id.mParentLL;
      LinearLayoutCompat mParentLL = rootView.findViewById(id);
      if (mParentLL == null) {
        break missingId;
      }

      return new ItemWhiteBarDetailChildListBinding((RelativeLayout) rootView, mAccountPriceTV,
          mCheckBox, mOrderNumberTV, mOrderPriceTV, mOrderTimeTV, mParentLL);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
